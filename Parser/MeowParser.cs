//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Meow.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MeowParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DATA_TYPE=1, CONTROLFLOW_KEYWORD_IF=2, CONTROLFLOW_KEYWORD_ELSE=3, BOOLEAN_VALUE=4, 
		RETURN_KEYWORD=5, IDENTIFIER=6, ARITHMATIC_OPERATOR=7, COMPARISON_OPERATOR=8, 
		ASIGNMENT_OPERATOR=9, STRING_LITERAL=10, FLOAT_LITERAL=11, INT_LITERAL=12, 
		PUNCTUATION_SEMICOLON=13, PUNCTUATION_OPEN_PARENTHESES=14, PUNCTUATION_CLOSE_PARENTHESES=15, 
		PUNCTUATION_OPEN_CURLY=16, PUNCTUATION_CLOSE_CURLY=17;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_variableDeclaration = 2, RULE_ifStatement = 3, 
		RULE_block = 4, RULE_returnStatement = 5, RULE_ifExpression = 6, RULE_expression = 7, 
		RULE_literal = 8;
	public static readonly string[] ruleNames = {
		"program", "statement", "variableDeclaration", "ifStatement", "block", 
		"returnStatement", "ifExpression", "expression", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'if'", "'else'", null, "'return'", null, null, null, "'='", 
		null, null, null, "';'", "'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DATA_TYPE", "CONTROLFLOW_KEYWORD_IF", "CONTROLFLOW_KEYWORD_ELSE", 
		"BOOLEAN_VALUE", "RETURN_KEYWORD", "IDENTIFIER", "ARITHMATIC_OPERATOR", 
		"COMPARISON_OPERATOR", "ASIGNMENT_OPERATOR", "STRING_LITERAL", "FLOAT_LITERAL", 
		"INT_LITERAL", "PUNCTUATION_SEMICOLON", "PUNCTUATION_OPEN_PARENTHESES", 
		"PUNCTUATION_CLOSE_PARENTHESES", "PUNCTUATION_OPEN_CURLY", "PUNCTUATION_CLOSE_CURLY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Meow.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MeowParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MeowParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MeowParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 38L) != 0)) {
				{
				{
				State = 18;
				statement();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATA_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24;
				variableDeclaration();
				}
				break;
			case CONTROLFLOW_KEYWORD_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25;
				ifStatement();
				}
				break;
			case RETURN_KEYWORD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 26;
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_TYPE() { return GetToken(MeowParser.DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MeowParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGNMENT_OPERATOR() { return GetToken(MeowParser.ASIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNCTUATION_SEMICOLON() { return GetToken(MeowParser.PUNCTUATION_SEMICOLON, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			Match(DATA_TYPE);
			State = 30;
			Match(IDENTIFIER);
			State = 31;
			Match(ASIGNMENT_OPERATOR);
			State = 32;
			expression(0);
			State = 33;
			Match(PUNCTUATION_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTROLFLOW_KEYWORD_IF() { return GetToken(MeowParser.CONTROLFLOW_KEYWORD_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNCTUATION_OPEN_PARENTHESES() { return GetToken(MeowParser.PUNCTUATION_OPEN_PARENTHESES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNCTUATION_CLOSE_PARENTHESES() { return GetToken(MeowParser.PUNCTUATION_CLOSE_PARENTHESES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTROLFLOW_KEYWORD_ELSE() { return GetToken(MeowParser.CONTROLFLOW_KEYWORD_ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(CONTROLFLOW_KEYWORD_IF);
			State = 36;
			Match(PUNCTUATION_OPEN_PARENTHESES);
			State = 37;
			ifExpression();
			State = 38;
			Match(PUNCTUATION_CLOSE_PARENTHESES);
			State = 39;
			block();
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTROLFLOW_KEYWORD_ELSE) {
				{
				State = 40;
				Match(CONTROLFLOW_KEYWORD_ELSE);
				State = 41;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNCTUATION_OPEN_CURLY() { return GetToken(MeowParser.PUNCTUATION_OPEN_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNCTUATION_CLOSE_CURLY() { return GetToken(MeowParser.PUNCTUATION_CLOSE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(PUNCTUATION_OPEN_CURLY);
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 38L) != 0)) {
				{
				{
				State = 45;
				statement();
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51;
			Match(PUNCTUATION_CLOSE_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN_KEYWORD() { return GetToken(MeowParser.RETURN_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNCTUATION_SEMICOLON() { return GetToken(MeowParser.PUNCTUATION_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(RETURN_KEYWORD);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7248L) != 0)) {
				{
				State = 54;
				expression(0);
				}
			}

			State = 57;
			Match(PUNCTUATION_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(MeowParser.COMPARISON_OPERATOR, 0); }
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			expression(0);
			State = 60;
			Match(COMPARISON_OPERATOR);
			State = 61;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MeowParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHMATIC_OPERATOR() { return GetToken(MeowParser.ARITHMATIC_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(MeowParser.COMPARISON_OPERATOR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN_VALUE:
			case STRING_LITERAL:
			case FLOAT_LITERAL:
			case INT_LITERAL:
				{
				State = 64;
				literal();
				}
				break;
			case IDENTIFIER:
				{
				State = 65;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 74;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 68;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 69;
						Match(ARITHMATIC_OPERATOR);
						State = 70;
						expression(3);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 71;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 72;
						Match(COMPARISON_OPERATOR);
						State = 73;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LITERAL() { return GetToken(MeowParser.INT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(MeowParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MeowParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_VALUE() { return GetToken(MeowParser.BOOLEAN_VALUE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 16, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7184L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,17,82,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,1,1,1,1,1,3,1,28,8,1,1,2,
		1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,43,8,3,1,4,1,4,5,4,
		47,8,4,10,4,12,4,50,9,4,1,4,1,4,1,5,1,5,3,5,56,8,5,1,5,1,5,1,6,1,6,1,6,
		1,6,1,7,1,7,1,7,3,7,67,8,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,75,8,7,10,7,12,
		7,78,9,7,1,8,1,8,1,8,0,1,14,9,0,2,4,6,8,10,12,14,16,0,1,2,0,4,4,10,12,
		81,0,21,1,0,0,0,2,27,1,0,0,0,4,29,1,0,0,0,6,35,1,0,0,0,8,44,1,0,0,0,10,
		53,1,0,0,0,12,59,1,0,0,0,14,66,1,0,0,0,16,79,1,0,0,0,18,20,3,2,1,0,19,
		18,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,1,1,0,0,0,23,21,
		1,0,0,0,24,28,3,4,2,0,25,28,3,6,3,0,26,28,3,10,5,0,27,24,1,0,0,0,27,25,
		1,0,0,0,27,26,1,0,0,0,28,3,1,0,0,0,29,30,5,1,0,0,30,31,5,6,0,0,31,32,5,
		9,0,0,32,33,3,14,7,0,33,34,5,13,0,0,34,5,1,0,0,0,35,36,5,2,0,0,36,37,5,
		14,0,0,37,38,3,12,6,0,38,39,5,15,0,0,39,42,3,8,4,0,40,41,5,3,0,0,41,43,
		3,8,4,0,42,40,1,0,0,0,42,43,1,0,0,0,43,7,1,0,0,0,44,48,5,16,0,0,45,47,
		3,2,1,0,46,45,1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,51,
		1,0,0,0,50,48,1,0,0,0,51,52,5,17,0,0,52,9,1,0,0,0,53,55,5,5,0,0,54,56,
		3,14,7,0,55,54,1,0,0,0,55,56,1,0,0,0,56,57,1,0,0,0,57,58,5,13,0,0,58,11,
		1,0,0,0,59,60,3,14,7,0,60,61,5,8,0,0,61,62,3,14,7,0,62,13,1,0,0,0,63,64,
		6,7,-1,0,64,67,3,16,8,0,65,67,5,6,0,0,66,63,1,0,0,0,66,65,1,0,0,0,67,76,
		1,0,0,0,68,69,10,2,0,0,69,70,5,7,0,0,70,75,3,14,7,3,71,72,10,1,0,0,72,
		73,5,8,0,0,73,75,3,14,7,2,74,68,1,0,0,0,74,71,1,0,0,0,75,78,1,0,0,0,76,
		74,1,0,0,0,76,77,1,0,0,0,77,15,1,0,0,0,78,76,1,0,0,0,79,80,7,0,0,0,80,
		17,1,0,0,0,8,21,27,42,48,55,66,74,76
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
